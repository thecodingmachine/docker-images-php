.DEFAULT_GOAL := help
SHELL=/bin/bash -e
.PHONY: blueprint-all
blueprint-all: blueprint-Dockerfile-all blueprint-bake
.PHONY: blueprint-bake
blueprint-bake:
	@docker run --rm -v "$$(pwd)/:/repo:ro" dinutac/jinja2docker:latest /repo/docker-bake.hcl.j2 > docker-bake.hcl
	@sed -i "1i\# DO NOT EDIT THIS FILE : It's generated from ./docker-bake.hcl.j2" docker-bake.hcl
	@echo "docker-bake.hcl => Generated"
.PHONY: blueprint-Dockerfile-all
blueprint-Dockerfile-all:
	@for filename in ./template/data/*.yaml; do \
		$(MAKE) --no-print-directory "blueprint-Dockerfile.$$(basename -s .yaml $${filename})" "blueprint-Dockerfile.$$(basename -s .yaml $${filename})-dev";\
	done;

blueprint-Dockerfile.%-dev: .FORCE
	@DOCKERFILE_TAG="$*-dev" TMPL_DATA="$*" DOCKERFILE_TMPL="Dockerfile.dev.j2" $(MAKE) --no-print-directory .generating.Dockerfile
blueprint-Dockerfile.%: .FORCE
	@DOCKERFILE_TAG="$*" TMPL_DATA="$*" DOCKERFILE_TMPL="Dockerfile.j2" $(MAKE) --no-print-directory .generating.Dockerfile
.generating.Dockerfile:
	@if [ ! -e "$$(pwd)/template/data/$(TMPL_DATA).yaml" ]; then echo "./template/data/$(TMPL_DATA).yaml do not exist"; exit 1;fi;
	@docker run --rm -v "$$(pwd)/template:/template:ro" dinutac/jinja2docker:latest /template/$(DOCKERFILE_TMPL) /template/data/$(TMPL_DATA).yaml > Dockerfile.$(DOCKERFILE_TAG)
	@sed -i "2i\# DO NOT EDIT THIS FILE : It's generated from ./template/$(DOCKERFILE_TMPL) and ./template/data/$(DOCKERFILE_TAG).yaml" Dockerfile.$(DOCKERFILE_TAG)
	@echo "Dockerfile.$(DOCKERFILE_TAG) => Generated"
.PHONY: .FORCE
.FORCE: # Force task like PHONY doing

build-%: blueprint-Dockerfile.% blueprint-Dockerfile.%-dev
	REPO=thecodingmachine/php-alpha \
	TAG_PREFIX="local-" \
	docker buildx bake $(*)
build-fpm:
	docker buildx bake php81-slim-fpm

test-8.1-cli: ## test version 8.1 variant cli
test-8.1-apache: ## test version 8.1 variant apache
test-%-cli: .FORCE
	@VARIANT=cli PHP_VERSION=$* $(MAKE) --no-print-directory .testAny
test-%-apache: .FORCE
	@VARIANT=apache PHP_VERSION=$* $(MAKE) --no-print-directory .testAny
test-%-fpm: .FORCE
	@VARIANT=fpm PHP_VERSION=$* $(MAKE) --no-print-directory .testAny
.testAny: .FORCE
	@PHP_VERSION="$(PHP_VERSION)" \
	REPO=thecodingmachine/php-alpha \
	BRANCH="v5" \
	VARIANT="$(VARIANT)" \
	TAG_PREFIX="local-" \
	./tests-suite/bash_unit -f tap ./tests-suite/*.sh
#test-cron: build
#	docker run -it --rm \
# 		--env "CRON_COMMAND_1=echo \"im \\\"\$$(whoami)\"\\\"" \
# 		--env "CRON_SCHEDULE_1=* * * * *" \
# 		--env "CRON_USER_1=daemon" \
# 		--env "CRON_COMMAND_2=echo \"im \\\"\$$(whoami)\"\\\"" \
# 		--env "CRON_SCHEDULE_2=* * * * *" \
# 		--env "CRON_USER_2=root" \
#		--env "S6_VERBOSITY=2" \
# 		thecodingmachine/php:8.1-v5-cli bash
#
#test-user: build-8.1-v5-cli
#	docker run -it --rm \
#		--env "S6_VERBOSITY=0" \
#		--env "USER=daemon" \
#		thecodingmachine/php:local-8.1-v5-cli whoami

#test:
#	docker run -it --rm \
#		--env "S6_VERBOSITY=1" \
#		thecodingmachine/php:8.1-v5-cli bash

#blueprint: ## Generate all blueprints file
#	@if ! type orbit >/dev/null 2>&1; then echo "Missing orbit dependency, please install from https://github.com/gulien/orbit/"; exit 1; fi
#	orbit run generate
#
#test-latest: test-8.1 ## Test the latest build only
#
#_test-prerequisites: blueprint
#	docker pull ubuntu:20.04
#
#test-quick:  ## Test 8.0 and 8.1 quickly
#	VERSION=8.0 VARIANT=cli $(MAKE) _test-version-quick
#	VERSION=8.1 VARIANT=cli $(MAKE) _test-version-quick
#
#test-8.1:  ## Test php8.1 build only
#	VERSION=8.1 VARIANT=cli $(MAKE) _test-version
#	VERSION=8.1 VARIANT=apache $(MAKE) _test-version
#	VERSION=8.1 VARIANT=fpm $(MAKE) _test-version
#
#test-8.0:  ## Test php8.0 build only
#	VERSION=8.0 VARIANT=cli $(MAKE) _test-version
#	VERSION=8.0 VARIANT=apache $(MAKE) _test-version
#	VERSION=8.0 VARIANT=fpm $(MAKE) _test-version
#
#_test-version: _test-prerequisites ## Test php build for VERSION="" and VARIANT=""
#	docker buildx bake --load \
#	    --set "*.platform=$$(uname -p)" \
#		php$${VERSION//.}-$(VARIANT)-all
#	PHP_VERSION="$(VERSION)" BRANCH=v4 VARIANT=$(VARIANT) ./tests-suite/bash_unit -f tap ./tests-suite/*.sh || (notify-send -u critical "Tests failed ($(VERSION)-$(VARIANT))" && exit 1)
#	notify-send -u critical "Tests passed with success ($(VERSION)-$(VARIANT))"
#
#_test-version-quick: _test-prerequisites ## Test php build for VERSION="" and VARIANT="" (without node variants)
#	docker buildx bake --load \
#	    --set "*.platform=$$(uname -p)" \
#		php$${VERSION//.}-slim-$(VARIANT) php$${VERSION//.}-$(VARIANT)
#	PHP_VERSION="$(VERSION)" BRANCH=v4 VARIANT=$(VARIANT) ./tests-suite/bash_unit -f tap ./tests-suite/*.sh || (notify-send -u critical "Tests failed ($(VERSION)-$(VARIANT))" && exit 1)
#	notify-send -u critical "Tests passed with success ($(VERSION)-$(VARIANT)) - without node-*"


build-$(PHP_VERSION)-$(VARIANT):
clean: ## Clean dangles image after build
	rm -rf /tmp/buildx-cache
.PHONY: help
help: ## This help.
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)